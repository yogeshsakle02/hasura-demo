---
kind: ScalarType
version: v1
definition:
  name: Int32
  graphql:
    typeName: Int32

---
kind: BooleanExpressionType
version: v1
definition:
  name: Int4BoolExp
  operand:
    scalar:
      type: Int32
      comparisonOperators:
        - name: _eq
          argumentType: Int32!
        - name: _gt
          argumentType: Int32!
        - name: _gte
          argumentType: Int32!
        - name: _in
          argumentType: "[Int32!]!"
        - name: _lt
          argumentType: Int32!
        - name: _lte
          argumentType: Int32!
        - name: _neq
          argumentType: Int32!
      dataConnectorOperatorMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: int4
          operatorMapping: {}
  logicalOperators:
    enable: true
  isNull:
    enable: true
  graphql:
    typeName: Int4BoolExp

---
kind: DataConnectorScalarRepresentation
version: v1
definition:
  dataConnectorName: mypostgres
  dataConnectorScalarType: int4
  representation: Int32
  graphql:
    comparisonExpressionTypeName: Int32ComparisonExp

---
kind: ScalarType
version: v1
definition:
  name: String_1
  graphql:
    typeName: String1

---
kind: BooleanExpressionType
version: v1
definition:
  name: VarcharBoolExp
  operand:
    scalar:
      type: String_1
      comparisonOperators:
        - name: _eq
          argumentType: String_1!
        - name: _gt
          argumentType: String_1!
        - name: _gte
          argumentType: String_1!
        - name: _ilike
          argumentType: String_1!
        - name: _in
          argumentType: "[String_1!]!"
        - name: _iregex
          argumentType: String_1!
        - name: _like
          argumentType: String_1!
        - name: _lt
          argumentType: String_1!
        - name: _lte
          argumentType: String_1!
        - name: _neq
          argumentType: String_1!
        - name: _nilike
          argumentType: String_1!
        - name: _niregex
          argumentType: String_1!
        - name: _nlike
          argumentType: String_1!
        - name: _nregex
          argumentType: String_1!
        - name: _regex
          argumentType: String_1!
        - name: starts_with
          argumentType: String_1!
        - name: ts_match_tt
          argumentType: String_1!
      dataConnectorOperatorMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: varchar
          operatorMapping: {}
  logicalOperators:
    enable: true
  isNull:
    enable: true
  graphql:
    typeName: VarcharBoolExp

---
kind: DataConnectorScalarRepresentation
version: v1
definition:
  dataConnectorName: mypostgres
  dataConnectorScalarType: varchar
  representation: String_1
  graphql:
    comparisonExpressionTypeName: String1ComparisonExp

---
kind: ScalarType
version: v1
definition:
  name: Bigdecimal
  graphql:
    typeName: Bigdecimal

---
kind: BooleanExpressionType
version: v1
definition:
  name: NumericBoolExp
  operand:
    scalar:
      type: Bigdecimal
      comparisonOperators:
        - name: _eq
          argumentType: Bigdecimal!
        - name: _gt
          argumentType: Bigdecimal!
        - name: _gte
          argumentType: Bigdecimal!
        - name: _in
          argumentType: "[Bigdecimal!]!"
        - name: _lt
          argumentType: Bigdecimal!
        - name: _lte
          argumentType: Bigdecimal!
        - name: _neq
          argumentType: Bigdecimal!
      dataConnectorOperatorMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: numeric
          operatorMapping: {}
  logicalOperators:
    enable: true
  isNull:
    enable: true
  graphql:
    typeName: NumericBoolExp

---
kind: DataConnectorScalarRepresentation
version: v1
definition:
  dataConnectorName: mypostgres
  dataConnectorScalarType: numeric
  representation: Bigdecimal
  graphql:
    comparisonExpressionTypeName: BigdecimalComparisonExp

---
kind: ScalarType
version: v1
definition:
  name: Int64
  graphql:
    typeName: Int64

---
kind: BooleanExpressionType
version: v1
definition:
  name: Int8BoolExp
  operand:
    scalar:
      type: Int64
      comparisonOperators:
        - name: _eq
          argumentType: Int64!
        - name: _gt
          argumentType: Int64!
        - name: _gte
          argumentType: Int64!
        - name: _in
          argumentType: "[Int64!]!"
        - name: _lt
          argumentType: Int64!
        - name: _lte
          argumentType: Int64!
        - name: _neq
          argumentType: Int64!
      dataConnectorOperatorMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: int8
          operatorMapping: {}
  logicalOperators:
    enable: true
  isNull:
    enable: true
  graphql:
    typeName: Int8BoolExp

---
kind: DataConnectorScalarRepresentation
version: v1
definition:
  dataConnectorName: mypostgres
  dataConnectorScalarType: int8
  representation: Int64
  graphql:
    comparisonExpressionTypeName: Int64ComparisonExp

---
kind: AggregateExpression
version: v1
definition:
  name: Int4AggExp
  operand:
    scalar:
      aggregatedType: Int32
      aggregationFunctions:
        - name: avg
          returnType: Bigdecimal
        - name: bit_and
          returnType: Int32
        - name: bit_or
          returnType: Int32
        - name: bit_xor
          returnType: Int32
        - name: max
          returnType: Int32
        - name: min
          returnType: Int32
        - name: stddev
          returnType: Bigdecimal
        - name: stddev_pop
          returnType: Bigdecimal
        - name: stddev_samp
          returnType: Bigdecimal
        - name: sum
          returnType: Int64
        - name: var_pop
          returnType: Bigdecimal
        - name: var_samp
          returnType: Bigdecimal
        - name: variance
          returnType: Bigdecimal
      dataConnectorAggregationFunctionMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: int4
          functionMapping:
            avg:
              name: avg
            bit_and:
              name: bit_and
            bit_or:
              name: bit_or
            bit_xor:
              name: bit_xor
            max:
              name: max
            min:
              name: min
            stddev:
              name: stddev
            stddev_pop:
              name: stddev_pop
            stddev_samp:
              name: stddev_samp
            sum:
              name: sum
            var_pop:
              name: var_pop
            var_samp:
              name: var_samp
            variance:
              name: variance
  count:
    enable: true
  countDistinct:
    enable: true
  graphql:
    selectTypeName: Int4AggExp

---
kind: BooleanExpressionType
version: v1
definition:
  name: TextBoolExp
  operand:
    scalar:
      type: String_1
      comparisonOperators:
        - name: _eq
          argumentType: String_1!
        - name: _gt
          argumentType: String_1!
        - name: _gte
          argumentType: String_1!
        - name: _ilike
          argumentType: String_1!
        - name: _in
          argumentType: "[String_1!]!"
        - name: _iregex
          argumentType: String_1!
        - name: _like
          argumentType: String_1!
        - name: _lt
          argumentType: String_1!
        - name: _lte
          argumentType: String_1!
        - name: _neq
          argumentType: String_1!
        - name: _nilike
          argumentType: String_1!
        - name: _niregex
          argumentType: String_1!
        - name: _nlike
          argumentType: String_1!
        - name: _nregex
          argumentType: String_1!
        - name: _regex
          argumentType: String_1!
        - name: starts_with
          argumentType: String_1!
        - name: ts_match_tt
          argumentType: String_1!
      dataConnectorOperatorMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: text
          operatorMapping: {}
  logicalOperators:
    enable: true
  isNull:
    enable: true
  graphql:
    typeName: TextBoolExp

---
kind: DataConnectorScalarRepresentation
version: v1
definition:
  dataConnectorName: mypostgres
  dataConnectorScalarType: text
  representation: String_1
  graphql:
    comparisonExpressionTypeName: String1ComparisonExp_1

---
kind: AggregateExpression
version: v1
definition:
  name: VarcharAggExp
  operand:
    scalar:
      aggregatedType: String_1
      aggregationFunctions:
        - name: max
          returnType: String_1
        - name: min
          returnType: String_1
      dataConnectorAggregationFunctionMapping:
        - dataConnectorName: mypostgres
          dataConnectorScalarType: varchar
          functionMapping:
            max:
              name: max
            min:
              name: min
  count:
    enable: true
  countDistinct:
    enable: true
  graphql:
    selectTypeName: VarcharAggExp

---
kind: OrderByExpression
version: v1
definition:
  name: Int32OrderByExp
  operand:
    scalar:
      orderedType: Int32
      enableOrderByDirections:
        enableAll: true
  graphql:
    expressionTypeName: Int32OrderByExp

---
kind: OrderByExpression
version: v1
definition:
  name: String1OrderByExp
  operand:
    scalar:
      orderedType: String_1
      enableOrderByDirections:
        enableAll: true
  graphql:
    expressionTypeName: String1OrderByExp

